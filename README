```markdown
# Лабораторная работа №3 - Система геометрических фигур

## Описание проекта

Проект реализует систему для работы с геометрическими фиграми на языке C++ с использованием принципов объектно-ориентированного программирования: наследования, полиморфизма и перегрузки операторов.

**Вариант 31:** Шестиугольник, Восьмиугольник, Треугольник

## Требования

- Компилятор C++ с поддержкой C++17
- CMake 3.10+
- Google Test (для запуска тестов)

## Структура проекта

```
lab3/
├── CMakeLists.txt
├── src
    ├── main.cpp
    ├── figure.h
    ├── figure.cpp
    ├── triangle.cpp
    ├── hexagon.cpp
    ├── octagon.cpp
    ├── array.cpp
├── test
    └── test_figure.cpp
```

## Классы и функциональность

### Базовый класс Figure
- Виртуальные методы для вычисления центра и площади
- Перегрузка операторов ввода/вывода
- Поддержка копирования и перемещения
- Геттеры для защищенных полей

### Производные классы
- **Triangle** (3 вершины)
- **Hexagon** (6 вершин) 
- **Octagon** (8 вершин)

### Класс Array
- Динамический массив для хранения указателей на Figure
- Автоматическое управление памятью
- Добавление, удаление, доступ по индексу

## Сборка проекта

### Основная программа
```bash
mkdir build && cd build
cmake ..
make
./figure
```

### Тесты
```bash
mkdir build && cd build
cmake ..
make
./test_figure
```

## Использование

### Ввод данных
Программа запрашивает координаты фигур в формате:
- Треугольник: 6 чисел (x1 y1 x2 y2 x3 y3)
- Шестиугольник: 12 чисел
- Восьмиугольник: 16 чисел

### Пример ввода для треугольника
```
1.0 0.5 0.0 0.933 0.0 0.067
```

### Функциональность программы
1. Создание массива фигур
2. Ввод координат с клавиатуры
3. Вычисление геометрических центров
4. Вычисление площадей фигур
5. Вывод общей площади
6. Удаление фигур по индексу
7. Обработка ошибок ввода

## Особенности реализации

### Принципы ООП
- **Наследование**: Все фигуры наследуются от базового класса Figure
- **Полиморфизм**: Виртуальные методы для вычисления центра и площади
- **Инкапсуляция**: Защищенные поля с публичными геттерами

### Перегрузка операторов
```cpp
operator<< // Вывод в поток
operator>> // Ввод из потока  
operator double() // Приведение к double (площадь)
operator== // Сравнение фигур
```

### Управление памятью
- Правило пяти для классов фигур
- Автоматическое освобождение памяти в Array
- Перемещающая семантика для эффективности

## Тестирование

Проект включает 20+ unit-тестов, проверяющих:
- Корректность математических вычислений
- Работу с массивом фигур
- Обработку граничных случаев
- Полиморфное поведение

## Демонстрация работы

Программа последовательно:
1. Создает массив фигур
2. Запрашивает ввод координат
3. Выводит информацию о фигурах
4. Демонстрирует операции с массивом
5. Показывает работу с исключениями

## Автор

Денисов Андрей Дмитриевич
Группа М8О-203БВ-24